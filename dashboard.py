# -*- coding: utf-8 -*-
"""Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wFd0Tk3bb0XzQt8CLDddjJBdC1G6LbJ1

# Import Library And Font
"""

!wget -q https://github.com/Phonbopit/sarabun-webfont/raw/master/fonts/thsarabunnew-webfont.ttf

!wget -q https://github.com/google/fonts/blob/main/ofl/chonburi/Chonburi-Regular.ttf

!pip install pythainlp

import gspread
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib
import matplotlib as mpl
import matplotlib.ticker as mtick
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import matplotlib.patheffects as pe
from mpl_toolkits import mplot3d
from mpl_toolkits.mplot3d import Axes3D
from google.auth import default
from google.colab import auth
import matplotlib.font_manager as fm
from wordcloud import WordCloud
from pythainlp.tokenize import word_tokenize # เป็นตัวตัดคำของภาษาไทย
from pythainlp.corpus import thai_stopwords # เป็นคลัง Stop Words ของภาษาไทย
from collections import Counter
import random

mpl.font_manager.fontManager.addfont('thsarabunnew-webfont.ttf')
mpl.rc('font', family='TH Sarabun New')

font_path = '/usr/share/fonts/truetype/tlwg/THSarabunNew.ttf'  # Adjust if you downloaded directly
font = fm.FontProperties(fname=font_path, size=16)

"""#Import csv"""

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/แบบสำรวจพฤติกรรมการใช้จ่ายของนักศึกษามหาวิทยาลัยธรรมศาสตร์.csv')
# Code for making the first row as header. Remove if not needed.
df

"""#Data Cleaning"""

#df['คุณเป็นนักศึกษาชั้นปีที่'] = df['คุณเป็นนักศึกษาชั้นปีที่'].str.extract(r'(\d+)').astype(int)
df['คุณเป็นนักศึกษาชั้นปีที่'] = df['คุณเป็นนักศึกษาชั้นปีที่'].str.replace(r'\s*\([^()]*\)', '', regex=True)
df

# Clean values in the 'column_name' by removing strings in parentheses
df['ในหนึ่งเดือนคุณใช้เงินในส่วนใดมากที่สุดอันดับที่ 1'] = df['ในหนึ่งเดือนคุณใช้เงินในส่วนใดมากที่สุดอันดับที่ 1'].str.replace(r'\s*\([^()]*\)', '', regex=True)
df['ในหนึ่งเดือนคุณใช้เงินในส่วนใดมากที่สุดอันดับที่ 2'] = df['ในหนึ่งเดือนคุณใช้เงินในส่วนใดมากที่สุดอันดับที่ 2'].str.replace(r'\s*\([^()]*\)', '', regex=True)
df['ในหนึ่งเดือนคุณใช้เงินในส่วนใดมากที่สุดอันดับที่ 3'] = df['ในหนึ่งเดือนคุณใช้เงินในส่วนใดมากที่สุดอันดับที่ 3'].str.replace(r'\s*\([^()]*\)', '', regex=True)
df

df['คุณเคยเผชิญปัญหาทางการเงินหรือไม่?'] = df['คุณเคยเผชิญปัญหาทางการเงินหรือไม่?'].map({'เคย': True, 'ไม่เคย': False})

# Replace the values in col2 with null if the corresponding value in col1 is 'ไม่มีค่าใช้จ่ายในอันดับนี้'
df.loc[df["ในหนึ่งเดือนคุณใช้เงินในส่วนใดมากที่สุดอันดับที่ 2"] == 'ไม่มีค่าใช้จ่ายในอันดับนี้', "จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 2 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?"] = np.nan
df.loc[df["ในหนึ่งเดือนคุณใช้เงินในส่วนใดมากที่สุดอันดับที่ 3"] == 'ไม่มีค่าใช้จ่ายในอันดับนี้', "จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 3 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?"] = np.nan
df

# สร้าง dictionary เก็บลำดับใหม่
reorder_map_money = {
    "NaN" : 0,
    "ต่ำกว่า 500 บาท": 1,
    "500 - 1,500 บาท": 2,
    "1,501 - 2,500 บาท": 3,
    "2,501 - 3,500 บาท": 4,
    "3,501 - 4,500 บาท": 5,
    "4,501 - 5,500 บาท": 6,
    "มากกว่า 5,500 บาท" : 7
}

df['จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 1 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?'] = df['จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 1 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?'].map(reorder_map_money)
df['จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 2 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?'] = df['จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 2 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?'].map(reorder_map_money)
df['จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 3 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?'] = df['จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 3 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?'].map(reorder_map_money)

df = df.drop(df[(df["จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 3 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?"] > df["จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 2 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?"]) & (df["จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 3 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?"] > df["จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 1 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?"])].index)

df = df.drop(df[(df["จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 2 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?"] > df["จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 1 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?"])].index)

reorder_map_money_back = {
    0 : "NaN",
    1 : "ต่ำกว่า 500 บาท",
    2 : "500 - 1,500 บาท",
    3 : "1,501 - 2,500 บาท",
    4 : "2,501 - 3,500 บาท",
    5 : "3,501 - 4,500 บาท",
    6 : "4,501 - 5,500 บาท",
    7 : "มากกว่า 5,500 บาท"
}

df['จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 1 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?'] = df['จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 1 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?'].map(reorder_map_money_back)
df['จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 2 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?'] = df['จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 2 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?'].map(reorder_map_money_back)
df['จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 3 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?'] = df['จากตัวเลือกข้างต้นที่คุณเลือกเป็นอันดับ 3 คุณใช้จ่ายในส่วนนี้ไปประมาณเท่าไหร่ต่อเดือน ?'].map(reorder_map_money_back)

# Reorder the index
df = df.reset_index(drop=True)
# Make index start with 1
df.index = df.index + 1

df

"""# Install Dashboard"""

pip install streamlit-shadcn-ui

pip install streamlit-extras

pip install streamlit-elements==0.1.*

data = df['อะไรคือปัจจัยสำคัญของคุณในการตัดสินใจเลือกใช้จ่ายสินค้าและบริการ']
text = ''
for row in data:       # ให้ python อ่านข้อมูลรีวิวจากทุก row ของ data
    text = text + row.lower() + ' ' # เก็บข้อมูลรีวิวของเราทั้งหมดเป็น String ในตัวแปร text
fixed_text = {'/' : '',
              '(' : '',
              ')' : '',
              '-' : '',
              ',' : '',
              'สินค้า' : '',
              'บริการ' : '',
              'ซื้อ' : '',
              'ดู' : '',
              'รูปลักษณื': 'รูปลักษณ์',
              'แะ' : 'และ',
              'คสาม' : 'ความ',
              'หิว' : 'ความต้องการ',
              'กิเลส' : 'ความต้องการ',
              'ปัจจัย4' : 'ความต้องการ',
              'ความอยากได้' : 'ความต้องการ',
              'ความอยาก' : 'ความต้องการ',
              'ความอยากได้ต่อสินค้า' : 'ความต้องการ',
              'อยากได้' : 'ความต้องการ',
              'ความจำเป็นของสินค้า' : 'ความจำเป็น',
              'จำเป็น' : 'ความจำเป็น',
              'ต้องมี' : 'ความจำเป็น',
              'ความพอใจ' : 'ความคุ้มค่า',
              'ดี' : 'ความคุ้มค่า',
              'ราคาของสินค้า' : 'ราคา',
              'ถูก' : 'ราคา',
              'ชอบ' : 'ความชอบ',
              'เหมาะสม' : 'ความเหมาะสม'
              }
for old_word, new_word in fixed_text.items():
    text = text.replace(old_word, new_word)
wt = word_tokenize(text, engine='multi_cut', keep_whitespace=False) # ตัดคำที่ได้จากตัวแปร text
path = 'thsarabunnew-webfont.ttf' # ตั้ง path ไปหา font ที่เราต้องการใช้แสดงผล
wordcloud = WordCloud(
                      font_path=path, # font ที่เราต้องการใช้ในการแสดงผล
                      stopwords=thai_stopwords(), # stop words ที่ใช้ซึ่งจะโดนตัดออกและไม่แสดงบน words cloud
                      relative_scaling=0.3,
                      min_font_size=1,
                      background_color = "#F4EDDA",
                      width=1000,
                      height=800,
                      max_words=8, # จำนวนคำที่เราต้องการจะแสดงใน Word Cloud
                      colormap='hsv',
                      scale=3,
                      font_step=4,
                      collocations=False,
                      regexp=r"[ก-๙a-zA-Z']+", # Regular expression to split the input text into token
                      margin=2,
                      contour_width=2, # Add this line
                      contour_color='black' # Add this line
                      ).generate(' '.join(wt)) # input คำที่เราตัดเข้าไปจากตัวแปร wt ในรูปแบบ string
fig, ax= plt.subplots(1, 1, figsize=(8, 8))
fig.patch.set_facecolor("#F4EDDA")
ax.imshow(wordcloud, interpolation='bilinear')
ax.axis("off")
ax.set_title('ปัจจัยสำคัญในการเลือกซื้อสินค้าและบริการ', color='white', fontsize=24, bbox={'facecolor': '#153d52', 'alpha': 1, 'pad': 2, 'boxstyle': 'round,pad=0.5'}, y=1.05)
fig.show()

"""# Dashboard"""

import streamlit as st
import pandas as pd
import altair as alt
import plotly.express as px

st.set_page_config(
    page_title="US Population Dashboard",
    page_icon="🏂",
    layout="wide",
    initial_sidebar_state="expanded")

alt.themes.enable("dark")

col = st.columns((1.5, 4.5, 2), gap='medium')

with col[0]:
    st.markdown('#### Number of students in each year according to average daily expenses')
    data = df['อะไรคือปัจจัยสำคัญของคุณในการตัดสินใจเลือกใช้จ่ายสินค้าและบริการ']
text = ''
for row in data:       # ให้ python อ่านข้อมูลรีวิวจากทุก row ของ data
    text = text + row.lower() + ' ' # เก็บข้อมูลรีวิวของเราทั้งหมดเป็น String ในตัวแปร text
fixed_text = {'/' : '',
              '(' : '',
              ')' : '',
              '-' : '',
              ',' : '',
              'สินค้า' : '',
              'บริการ' : '',
              'ซื้อ' : '',
              'ดู' : '',
              'รูปลักษณื': 'รูปลักษณ์',
              'แะ' : 'และ',
              'คสาม' : 'ความ',
              'หิว' : 'ความต้องการ',
              'กิเลส' : 'ความต้องการ',
              'ปัจจัย4' : 'ความต้องการ',
              'ความอยากได้' : 'ความต้องการ',
              'ความอยาก' : 'ความต้องการ',
              'ความอยากได้ต่อสินค้า' : 'ความต้องการ',
              'อยากได้' : 'ความต้องการ',
              'ความจำเป็นของสินค้า' : 'ความจำเป็น',
              'จำเป็น' : 'ความจำเป็น',
              'ต้องมี' : 'ความจำเป็น',
              'ความพอใจ' : 'ความคุ้มค่า',
              'ดี' : 'ความคุ้มค่า',
              'ราคาของสินค้า' : 'ราคา',
              'ถูก' : 'ราคา',
              'ชอบ' : 'ความชอบ',
              'เหมาะสม' : 'ความเหมาะสม'
              }
for old_word, new_word in fixed_text.items():
    text = text.replace(old_word, new_word)
wt = word_tokenize(text, engine='multi_cut', keep_whitespace=False) # ตัดคำที่ได้จากตัวแปร text
path = 'thsarabunnew-webfont.ttf' # ตั้ง path ไปหา font ที่เราต้องการใช้แสดงผล
wordcloud = WordCloud(
                      font_path=path, # font ที่เราต้องการใช้ในการแสดงผล
                      stopwords=thai_stopwords(), # stop words ที่ใช้ซึ่งจะโดนตัดออกและไม่แสดงบน words cloud
                      relative_scaling=0.3,
                      min_font_size=1,
                      background_color = "#F4EDDA",
                      width=1000,
                      height=800,
                      max_words=8, # จำนวนคำที่เราต้องการจะแสดงใน Word Cloud
                      colormap='hsv',
                      scale=3,
                      font_step=4,
                      collocations=False,
                      regexp=r"[ก-๙a-zA-Z']+", # Regular expression to split the input text into token
                      margin=2,
                      contour_width=2, # Add this line
                      contour_color='black' # Add this line
                      ).generate(' '.join(wt)) # input คำที่เราตัดเข้าไปจากตัวแปร wt ในรูปแบบ string
fig, ax= plt.subplots(1, 1, figsize=(8, 8))
fig.patch.set_facecolor("#F4EDDA")
ax.imshow(wordcloud, interpolation='bilinear')
ax.axis("off")
ax.set_title('ปัจจัยสำคัญในการเลือกซื้อสินค้าและบริการ', color='white', fontsize=24, bbox={'facecolor': '#153d52', 'alpha': 1, 'pad': 2, 'boxstyle': 'round,pad=0.5'}, y=1.05)
fig.show()